# -*- coding: utf-8 -*-
"""scoring_hdb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18I2kcKDFRzqI-ErNetvZQCJAt7jLIDlI
"""

# ANSELLIM
# 4 NOV 2021

"""Given HDB dataset combined with lat & long information, as well as coordinate data for various places of interest (taxi stands, schools, mrt, hawker centers, etc.), calculate counts of places of interest within a 1km radius *for each HDB block*."""

# Specify radius in kilometers
RADIUS=1.0

from datetime import datetime
import pandas as pd
from geopy.distance import geodesic
import re
import time

timestamp=datetime.now().strftime("%d/%m/%Y %H:%M:%S")
print(timestamp) # GMT

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/6242_PROJECT/data

hdb = pd.read_csv("./hdb_aggregated.csv") # USE hdb_aggregated
malls = pd.read_csv("./data_malls.csv")
taxi_stands = pd.read_csv("./taxi_stands.csv")
primary_schools=pd.read_csv("./data_prischools.csv")
mrt = pd.read_csv("./data_MRT.csv")
hawker=pd.read_csv("./data_hawker.csv")
carparks=pd.read_csv("./carparks.csv")
bus_stops = pd.read_csv("./bus_stops.csv")
amenities = pd.read_csv("./amenities.csv")
supermarkets = pd.read_csv("./supermarkets.csv")
secondary_schools=pd.read_csv("./secondary_schools.csv")
eating_establishments=pd.read_csv("./eating_establishments.csv")
parks = pd.read_csv("./parks.csv")

print(hdb.shape[0])

hdb

hdb=hdb[(hdb["isLatLongAvailable"]==True)]
hdb.reset_index(inplace=True)

print(hdb.shape[0])

import numpy as np
SUBSET=2
np.random.permutation(hdb.shape[0])[:SUBSET]
hdb=hdb.iloc[np.random.permutation(hdb.shape[0])[:SUBSET],:]
hdb.reset_index(inplace=True)

print("Number of HDB blocks with lat & long info:",hdb.shape[0])

df = hdb.copy(deep=True)
taxi_stands["lat"],taxi_stands["long"] = taxi_stands["Latitude"],taxi_stands["Longitude"]
primary_schools[['long','lat']]=primary_schools['coordinates'].str.split(',',1,expand=True)
mrt[['long','lat']]=mrt['Coordinates'].str.split(',',1,expand=True)
hawker[['long','lat']]=hawker['Coordinates'].str.split(',',1,expand=True)
hawker['lat']=hawker['lat'].str.rstrip(",0.0")
carparks['lat'],carparks['long']=carparks['latitude'],carparks['longitude']
bus_stops['lat'],bus_stops['long']=bus_stops['Latitude'],bus_stops['Longitude']

sports_facility_types = list(amenities.facility_type.unique())
sports_facility_types.remove('CHAS Clinic')
sports_facility_types.remove('Community Centre')
chas_clinics = amenities[amenities['facility_type']=='CHAS Clinic'].reset_index()
sports_facilities = amenities[amenities['facility_type'].isin(sports_facility_types)].reset_index()
community_centers = amenities[amenities['facility_type']=='Community Centre'].reset_index()

places = [malls,taxi_stands,primary_schools,mrt,hawker,carparks,bus_stops,chas_clinics,sports_facilities,community_centers,supermarkets,secondary_schools,eating_establishments,parks]
places_names = ['malls','taxi_stands','primary_schools','mrt','hawker','carparks','bus_stops','chas_clinics','sports_facilities','community_centers','supermarkets','secondary_schools','eating_establishments','parks']



start=time.time()
interm = time.time()
for i in range(len(places)):
  dataframe = places[i]
  dataframe.reset_index(inplace=True)
  place_name = places_names[i]
  print("-------------------------")
  print("Working on feature dataframe {}".format(place_name))
  print("Number of places of interest:",dataframe.shape[0])
  print("Estimated number of pairwise computations:",dataframe.shape[0]*df.shape[0])
  new_column_name = "num_"+place_name
  df[new_column_name] = 0
  for i in range(df.shape[0]):
    lat1 = df.loc[i,"lat"]
    long1 = df.loc[i,"long"]
    origin = (lat1,long1)
    counter = 0
    for j in range(dataframe.shape[0]):
      lat2 = dataframe.loc[j,"lat"]
      long2 = dataframe.loc[j,"long"]
      dest = (lat2,long2)
      try:
        dist = geodesic(origin,dest).km
        if dist<=RADIUS:
          counter+=1
      except ValueError:
        continue
    df.loc[i,new_column_name]=counter
  df.to_csv('./processed/df_hdb.csv') # Checkpointed
  print("Saved checkpoint")
  print("Completed working on feature dataframe {}".format(place_name))
  print("Time taken for this feature dataframe (seconds):",time.time()-interm)
  interm=time.time()
  print("Total time elapsed since start (seconds):",(time.time()-start))
end=time.time()
print("---------------------------------------")
print("END OF ALL TASKS")
print("time taken (seconds): {}".format(end-start))

df.to_csv('./processed/df_hdb.csv')

